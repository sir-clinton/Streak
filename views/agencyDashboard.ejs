<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Agency Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      font-family: 'Satoshi', sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
      color: #333;
    }
    .dashboard-container {
      max-width: 1000px;
      margin: auto;
      padding: 30px 20px;
    }
    h2 {
      text-align: center;
      margin-bottom: 30px;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
    .card {
      background-color: #25D366;
      color: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.2);
    }
    .card h4 {
      margin-bottom: 10px;
      font-size: 18px;
    }
    .escort-list {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
    }
    .escort-list h3 {
      margin-bottom: 15px;
    }
    .escort-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
    .escort-item:last-child {
      border-bottom: none;
    }
    .actions {
      margin-top: 30px;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }
    .actions button {
      flex: 1;
      padding: 12px;
      background-color: #128C7E;
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .actions button:hover {
      background-color: #0e6f63;
    }
   .modal-overlay {
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  display: none;
  width: 100%;
  min-height: 100vh;
  justify-content: center; 
  align-items: center;
  position: fixed;
  inset: 0;
}

.modal-overlay.active {
  display: flex;
  opacity: 1;
  pointer-events: auto;
}
.modal-content {
  background-color: #fff;
  padding: 30px;
  border-radius: 8px;
  width: 90%;
  max-width: 500px;
  box-shadow: 2px 2px 10px rgba(0,0,0,0.3);
  position: relative;
}.modal-content form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.modal-content h3 {
  margin-bottom: 10px;
  font-size: 20px;
  color: #128C7E;
  text-align: center;
}

.modal-content input,
.modal-content select {
  padding: 10px 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 15px;
  font-family: inherit;
  transition: border-color 0.3s ease;
}

.modal-content input:focus,
.modal-content select:focus {
  border-color: #25D366;
  outline: none;
}

.modal-content button[type="submit"] {
  padding: 12px;
  background-color: #25D366;
  color: white;
  border: none;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}

.modal-content button[type="submit"]:hover {
  background-color: #1da851;
}
.close-btn {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  cursor: pointer;
  color: #333;
}#previewImage {
  max-width: 100%;
  max-height: 200px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 1px 1px 6px rgba(0,0,0,0.1);
  margin-top: -5px;
}

  </style>
</head>
<body>
  <!-- Add this inside your <body> -->
<div class="dashboard-container">
  <h2>Welcome, Raha Agency</h2>

  <div class="stats-grid">
    <!-- Cards as before -->
  </div>

  <div class="escort-list">
    <h3>Managed Escorts</h3>
    <div id="escortContainer"></div>
  </div>

  <div class="actions">
    <button onclick="openModal()">Add New Escort</button>
    <button>View Bookings</button>
    <button>Edit Profile</button>
    <button>View Analytics</button>
  </div>
</div>

<!-- ðŸš¨ Modal Overlay -->
<div id="escortModal" class="modal-overlay">
  <div class="modal-content">
    <span class="close-btn" onclick="closeModal()">&times;</span>
    <form id="addEscortForm">
      <h3>Add New Escort</h3>
      <input type="text" name="name" placeholder="Escort Name" required />
      <input type="email" name="email" placeholder="Escort Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <select name="city" id="city" required>
        <option value="" disabled selected hidden>Select City</option>
        <option value="Nairobi">Nairobi</option>
        <option value="Kiambu">Kiambu</option>
        <!-- Add more cities -->
      </select>
      <select name="areaLabel" id="location" required>
        <option value="" disabled selected hidden>Select Area</option>
      </select>
      <label for="photoInput">Escort Photo</label>
      <input type="file" name="userImg" id="photoInput" accept="image/*" required />
      <img id="previewImage" style="max-width: 100%; border-radius: 6px; display: none;" />

      <button type="submit">Add Escort</button>
    </form>
  </div>
</div>


<script>
  let base64Image = '';

document.getElementById('photoInput').addEventListener('change', function () {
  const file = this.files[0];
  if (!file) return;
  if (!file.type.startsWith('image/')) {
  alert('Please select a valid image file.');
  return;
  }

  if (file.size > 2 * 1024 * 1024) {
    alert('Image size should be less than 2MB.');
    return;
  }

  const reader = new FileReader();
  reader.onload = function () {
    base64Image = reader.result;
    document.getElementById('previewImage').src = base64Image;
    document.getElementById('previewImage').style.display = 'block';
  };
  reader.readAsDataURL(file);
});

const escortModal = document.getElementById('escortModal');

function openModal() {
  document.querySelector('#addEscortForm input[name="name"]').focus();
  escortModal.classList.add('active');
  document.body.style.overflow = 'hidden';
}

function closeModal() {
  escortModal.classList.remove('active');
  document.body.style.overflow = '';
}

const locationMap = { /* same as before */ };
const citySelect = document.getElementById("city");
const areaSelect = document.getElementById("location");

citySelect.addEventListener("change", () => {
  const areas = locationMap[citySelect.value] || [];
  areaSelect.innerHTML = '<option value="" disabled selected hidden>Select Area</option>';
  areas.forEach(area => {
    const option = document.createElement("option");
    option.value = area;
    option.textContent = area;
    areaSelect.appendChild(option);
  });
});

document.getElementById('addEscortForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const submitBtn = document.querySelector('#addEscortForm button[type="submit"]');
  submitBtn.disabled = true;
  submitBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Adding...';

  const formData = new FormData(e.target);
  const escort = Object.fromEntries(formData.entries());
  escort.userImg = base64Image;
  try {
    const res = await fetch('/api/agency/add-escort', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(escort)
    });

    const data = await res.json();

    if (!res.ok || !data.success) {
      throw new Error(data.message || 'Failed to add escort');
    }

    alert('Escort added successfully!');
    e.target.reset();
    document.getElementById('photoInput').value = '';
    document.getElementById('previewImage').style.display = 'none';
    base64Image = '';
    closeModal();
    fetchEscorts();

  } catch (err) {
    console.error('Escort submission error:', err);
    alert(err.message || 'Something went wrong. Please try again.');
  } finally {
    submitBtn.disabled = false;
    submitBtn.innerHTML = 'Add Escort';
  }
});


const escortContainer = document.getElementById('escortContainer');

async function fetchEscorts() {
  const res = await fetch('/api/agency/escorts');
  const escorts = await res.json();

  escortContainer.innerHTML = '';
  escorts.forEach(escort => {
    const div = document.createElement('div');
    div.className = 'escort-item';
    div.innerHTML = `
      ${escort.name} â€“ ${escort.areaLabel} â€“ ${escort.isVerified ? 'Verified' : 'Pending'}
      <button onclick="deleteEscort('${escort._id}')" style="float:right; background:red; color:white; border:none; padding:5px 10px; border-radius:4px;">Delete</button>
    `;
    escortContainer.appendChild(div);
  });
}

async function deleteEscort(id) {
  if (!confirm('Are you sure you want to delete this escort?')) return;

  const res = await fetch(`/api/agency/escort/${id}`, { method: 'DELETE' });
  const data = await res.json();
  if (data.success) {
    fetchEscorts();
  } else {
    alert('Failed to delete escort');
  }
}

fetchEscorts();
</script>
</body>
</html>
